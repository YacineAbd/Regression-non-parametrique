),
guide = "legend"
) +
labs(title = "Ajustement de la régression polynômiale (Degré 4 )") +
theme(legend.position = "bottom", legend.box = "horizontal") +
theme_ggplot()
g_poly4
set.seed(0207)
N_ligne <- nrow(fossil)
vect_random <- sample(1:N_ligne, 0.7 * N_ligne)
Data_train <- fossil %>%
slice(vect_random)
Data_test <- fossil %>%
slice(-vect_random)
age_test <- Data_test$age
age_train <- Data_train$age
strontium.ratio_test <- Data_test$strontium.ratio
strontium.ratio_train <- Data_train$strontium.ratio
#' Mean Square Error
#'
#' @param LM_fit le modèle
#' @param df la table
#'
#' @return erreur_train
#' @export
#'
#' @examples
err_prediction <- function(LM_fit, df) {
(df %>%
.$strontium.ratio - LM_fit %>%
predict(df %>% select(-strontium.ratio)))^2 %>%
mean()
}
Reg_poly_n <-
lapply(2:15, function(x) {
lm(strontium.ratio ~ poly(age, x, raw = TRUE), data = Data_train)
})
MSE_polyDegre <-
lapply(1:length(Reg_poly_n), function(x) {
Reg_poly_n[[x]] %>% err_prediction(Data_test)
}) %>%
unlist()
# Validation croisée
set.seed(0207)
cv1 <- cv.polywog(strontium.ratio ~ scale(age),
data = fossil,
degrees.cv = 2:15,
nfolds = 7,
thresh = 1e-4)
err_1 <- cv1$results
MSE_CV_PolyRegr <- err_1[,3]
data_erreurs <- data.frame(
Degre = 2:15,
MSE_polyDegre = MSE_polyDegre,
MSE_CV_PolyRegr = MSE_CV_PolyRegr
)
data_erreurs_melt <- data_erreurs %>%
reshape2::melt(id = 1 , value.name = 'value' , variable = 'type_erreur')
data_erreurs_melt %>%
ggplot() +
geom_point(mapping = aes(x = Degre, y = value, col = type_erreur)) +
geom_line(mapping = aes(x = Degre, y = value, col = type_erreur))
ggplot() +
geom_point(mapping = aes(y = strontium.ratio_train, x = age_train, colour = "black")) +
geom_point(mapping = aes(y = strontium.ratio_test, x = age_test, colour = "blue")) +
geom_line(mapping = aes(
x = age_train,
y = predict(Reg_poly_n[[2]]),
colour = "#0218a2"
),
size = 1.5) +
geom_line(mapping = aes(
x = age_train,
y = predict(Reg_poly_n[[5]]),
colour = "#aa2345"
),
size = 1.5) +
geom_line(mapping = aes(
x = age_train,
y = predict(Reg_poly_n[[13]]),
colour = "#ffa500"
),
size = 1.5) +
scale_color_identity(
name = "",
breaks = c("black", "blue", "#0218a2", "#aa2345", "#ffa500"),
labels = c(
"Base d'apprentissage",
"Base de test",
"Degre 3",
"Degre 6",
"Degre 14"
),
guide = "legend"
) +
labs(title = "Différentes régressions polynomiales") +
theme(legend.position = "bottom", legend.box = "horizontal") +
theme_ggplot()
resum_coef11 <- Reg_poly_n[[5]] %>%
tidy()
Resum_poly11 <- Reg_poly_n[[5]] %>%
summary()
resum_coefR11 <- data.frame(
R2 = Resum_poly11$r.squared,
aR2 = Resum_poly11$adj.r.squared
)
merge(resum_coef11, resum_coefR11) %>%
kable(
format = "latex",
booktabs = T,
caption = "Résumé du modèle de la régression polynômiale (Degré 6)",
) %>%
kable_styling(latex_options = c("striped", "hold_position"))
attach(fossil)
Bbase <- lm(strontium.ratio~bs(age,df=6,degree=2, intercept=TRUE)-1)
detach(fossil)
fossil %>%
ggplot() +
geom_point(
mapping = aes(x = age, y = strontium.ratio, colour = "black"),
size = 1.5
) +
geom_line(mapping = aes(age, predict(Bbase), colour = "blue"),
size = 1.2) +
scale_color_identity(
name = "B-spline",
breaks = c("black", "blue", "red"),
labels = c("Jeu de données",
"Bspline avec D°2 et df=6",
"Reg poly degré 4"),
guide = "legend"
) +
labs(title = "Estimation par Bspline et Régression polynomiale") +
theme(legend.position = "bottom", legend.box = "horizontal") +
theme_ggplot()
err_prediction(Bbase, fossil)
attach(Data_train)
Reg_Bspline <-
lapply(1:15, function(x) {
lapply(1:15, function(y) {
lm(strontium.ratio ~ bs(
age,
df = x + y + 1,
degree = x,
intercept = TRUE
) - 1)
})
})
MSE_Bspline <-
lapply(1:length(Reg_Bspline), function(x) {
lapply(1:length(Reg_Bspline), function(y) {
Reg_Bspline[[x]][[y]] %>% err_prediction(Data_test)
})
}) %>%
unlist()
detach(Data_train)
data_erreurs_Bspline <- data.frame(
Df = rep(1:15,15),
Degre = rep(1:15, each = 15),
MSE_Bspline = MSE_Bspline
)
MSE_data_min <- data_erreurs_Bspline %>%
filter(MSE_Bspline == min(MSE_Bspline))
MSE_data_min
Bbase <-
lm(strontium.ratio_train ~ bs(
age_train,
df = 11,
degree = 2,
intercept = TRUE
) - 1)
ggplot() +
geom_point(mapping = aes(y = strontium.ratio_train,
x = age_train,
colour = "red")) +
geom_point(mapping = aes(y = strontium.ratio_test,
x = age_test,
colour = "blue")) +
geom_line(mapping = aes(age_train,
predict(Bbase),
colour = "black"),
size = 1.2) +
geom_line(mapping = aes(x = age_train,
y = predict(Reg_poly_n[[5]]),
colour = "#aa2345"
),
size = 1.2) +
scale_color_identity(
name = "",
breaks = c("red",
"blue",
"black",
"#aa2345"),
labels = c(
"Base d'apprentissage",
"Base de test",
"Bspline avec D° = 2 et df = 11",
"Degré 6"
),
guide = "legend"
) +
labs(title = "Estimation par Bspline et régression polynômiale ") +
theme(legend.position = "bottom",
legend.box = "horizontal") +
theme_ggplot()
#' la fonction indicatrice de |x| < 1
#'
#' @param x peut être un vecteur ou une valeur mais
#'
#' @return la fonction retourne une vecteur logique
#' @export
#'
#' @examples fonction_indicatrice(-2:2) FALSE  TRUE  TRUE
fonction_indicatrice <- function(x){
return(abs(x) <= 1)
}
#' la function utilisé dans la fonction Epanechnikov
#'
#' @param t
#'
#' @return
#' @export
#'
#' @examples
K <- function(t) {
return((3/4)*(1 - t^2)*fonction_indicatrice(t))
}
u <- seq(-2, 2, length.out = 200)
ggplot() +
geom_line(mapping = aes(x = u, y = K(u)),
col = "blue",
size = 1.2) +
theme_ggplot()
# Epanechnikov quadratic kernel
#' Title
#'
#' @param x_0
#' @param x
#' @param h
#'
#' @return
#' @export
#'
#' @examples
K_lambda <- function(x_0, x, h){
K(abs(x - x_0) / h)
}
# average
#' Title
#'
#' @param x_0
#' @param x
#' @param h
#' @param y
#'
#' @return
#' @export
#'
#' @examples
hat_f <- function(x_0, x = x, h, y = y){
return(sum(K_lambda(x_0, x, h) * y) / sum(K_lambda(x_0, x, h)))
}
#' Prédiction de y
#'
#' @param n
#' @param x_0
#' @param x
#' @param h
#' @param y
#'
#' @return
#' @export
#'
#' @examples
pred_y <-
function(n, x_0, x, h, y) {
lapply(1:n, function(t) {
hat_f(x_0[t], x, h, y)
}) %>%
unlist()
}
attach(fossil)
ratio.pred <- pred_y(nrow(fossil),
age,
age,
7,
strontium.ratio)
detach(fossil)
attach(fossil)
MSE_ker <-((strontium.ratio - ratio.pred)^2) %>%
mean()
MSE_ker
detach(fossil)
fossil %>%
ggplot() +
geom_point(mapping = aes(y = strontium.ratio,
x = age,
colour = "red")) +
geom_line(mapping = aes(y = ratio.pred,
x = age,
colour = "blue"),
size = 1.2) +
scale_color_identity(
name = "Estimation",
breaks = c("red",
"blue"),
labels = c(
"Jeu de données",
"Noyau"
),
guide = "legend"
) +
labs(title = "Estimation à noyau ") +
theme(legend.position = "bottom",
legend.box = "horizontal") +
theme_ggplot()
cv_noyau <- function(n, x, x_0, y_fossil, y_rat.pre, h) {
w <-
lapply(1:n, function(z) {
K((x - x_0[z]) / h) / sum(K((x - x_0[z]) / h))
}) %>%
unlist()
e <-
lapply(1:n, function(v) {
((y_fossil[v] - y_rat.pre[v]) / (1 - w[v])) ^ 2
}) %>%
unlist()
CV_erreur <- mean(e)
return(CV_erreur)
}
attach(fossil)
error_CV <- cv_noyau(nrow(fossil), age, age, strontium.ratio, ratio.pred, 7)
error_CV
h <- seq(from=0.5,to=5, by=0.1)
cv_noyau_h <-
lapply(h, function(j) {
cv_noyau(nrow(fossil), age, age, strontium.ratio, ratio.pred, j)
}) %>%
unlist()
Data_erreur_h2 <- data.frame(
h = h,
cv_noyau_h = cv_noyau_h
)
Data_erreur_h2 %>%
ggplot() +
geom_point(
mapping = aes(y = cv_noyau_h, x = h),
colour = "black",
size = 1.5,
shape = 21,
fill = "black"
) +
geom_line(
mapping = aes(y = cv_noyau_h, x = h),
colour = "blue",
size = 1.2,
linetype = "dashed"
) +
labs(title = "Erreur en fonction des valeurs de h",
y = "MSE") +
theme_ggplot()
h_opt = Data_erreur_h2 %>% slice(which(cv_noyau_h==min(cv_noyau_h)))
h_opt
Data_train %>%
attach()
ratio.pred_train <-
pred_y(nrow(Data_train), age, age, 2, strontium.ratio)
Data_train %>%
ggplot() +
geom_point(mapping = aes(y = strontium.ratio,
x = age,
colour = "red")) +
geom_point(
data = Data_test,
mapping = aes(
y = Data_test$strontium.ratio,
x = Data_test$age,
colour = "blue"
)
) +
geom_line(mapping = aes(age, predict(Bbase), colour = "black"),
size = 1.2) +
geom_line(mapping = aes(
x = age,
y = predict(Reg_poly_n[[5]]),
colour = "#aa2345"
),
size = 1.2) +
geom_line(mapping = aes(y = ratio.pred_train,
x = age,
colour = "#07c4c5"),
size = 1.2) +
scale_color_identity(
name = "",
breaks = c("red", "blue", "black", "#aa2345", "#07c4c5"),
labels = c(
"Data_train",
"Data_test",
"Bspline D° = 2 et df = 11",
"Degré 6",
"Noyau h = 3.2 "
),
guide = "legend"
) +
labs(title = "Estimation par différentes méthodes") +
theme(legend.position = "bottom", legend.box = "horizontal") +
theme_ggplot()
Data_train %>%
detach()
#' Calcule de la trace d'une matrice
#'
#' @param A
#'
#' @return
#' @export
#'
#' @examples
trace <- function(A) {
n <- dim(A)[1] # Dimension de la matrice
tr <- 0 # Initialisation de la valeur initiale de la trace
tr <- lapply(1:n, function(k)
A[k, k]) %>%
unlist() %>%
sum()
}
fossil %>%
attach()
K_optimale <- (0.25 * fossil %>%
nrow()) %>%
round() %>%
min(35)
reg.spline <- function(xech, yech, lambda) {
quantile_noeuds <-
seq(0, 1, length = K_optimale + 2)[-c(1, K_optimale + 2)]
noeud_pos <- quantile(xech, prob = quantile_noeuds)
Z <- outer(xech, noeud_pos, "-")
Xpol <- Z ^ 2 * (Z > 0)
X <- cbind(rep(1, fossil %>%
nrow()), xech, xech ^ 2, Xpol)
S_lambda <- X %*% solve(crossprod(X) + lambda * diag(c(rep(0, 3),
rep(1, K_optimale)))) %*%
t(X)
Y_chap <- S_lambda %*% yech
Trace <-
solve(crossprod(X) + lambda * diag(c(rep(0, 3),
rep(1, K_optimale)))) %*%
crossprod(X) %>%
trace()
return(list(Trace, Y_chap))
}
grille_lambda <- c(0.001, 0.05, 0.8, 1.5, 8)
y_chap_lambda <-
map(grille_lambda, function(i)
reg.spline(age_norm, strontium.ratio, i)[2] %>% unlist())
fossil %>%
detach()
fossil %>%
attach()
K_optimale <- (0.25 * fossil %>%
nrow()) %>%
round() %>%
min(35)
reg.spline <- function(xech, yech, lambda) {
quantile_noeuds <-
seq(0, 1, length = K_optimale + 2)[-c(1, K_optimale + 2)]
noeud_pos <- quantile(xech, prob = quantile_noeuds)
Z <- outer(xech, noeud_pos, "-")
Xpol <- Z ^ 2 * (Z > 0)
X <- cbind(rep(1, fossil %>%
nrow()), xech, xech ^ 2, Xpol)
S_lambda <- X %*% solve(crossprod(X) + lambda * diag(c(rep(0, 3),
rep(1, K_optimale)))) %*%
t(X)
Y_chap <- S_lambda %*% yech
Trace <-
solve(crossprod(X) + lambda * diag(c(rep(0, 3),
rep(1, K_optimale)))) %*%
crossprod(X) %>%
trace()
return(list(Trace, Y_chap))
}
grille_lambda <- c(0.001, 0.05, 0.8, 1.5, 8, 10,17,20,0.0001, 0.0000001)
y_chap_lambda <-
map(grille_lambda, function(i)
reg.spline(age_norm, strontium.ratio, i)[2] %>% unlist())
fossil %>%
detach()
Data_pred_lambda <- do.call(cbind, y_chap_lambda) %>%
melt() %>%
mutate(
lambda = rep(grille_lambda, each = nrow(fossil)),
age = rep(fossil$age_norm, length(grille_lambda))
)
Data_pred_lambda %>%
ggplot() +
annotate(
geom = 'point',
x = fossil$age_norm,
y = fossil$strontium.ratio,
colour = "red"
) +
geom_line(aes(x = age, y = value, col = as.factor(lambda)), size = 1) +
labs(
title = "Prédiction de strontium.ratio pour différentes lambda",
x = "lambda",
y = "strontium.ratio prédite",
colour = "Valeurs de Lambda"
) +
theme(legend.position = "bottom",
legend.box = "horizontal") +
theme_ggplot()
h_opt
